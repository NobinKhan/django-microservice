# Generated by Django 4.1.6 on 2023-02-06 15:30

import apps.users.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('created_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('password', models.CharField(blank=True, max_length=128, null=True, verbose_name='password')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='Email')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='BD', unique=True, verbose_name='Phone')),
                ('firebase_device_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', null=True, verbose_name='active')),
                ('is_deleted', models.BooleanField(blank=True, default=False, help_text='If user wants to delete account than change this field to True. If this seleted than all other objects related to this user will be marked as deleted too.If User try to reopen account than just make this false but it will not reverse other related objects. ', null=True, verbose_name='Deleted Account')),
                ('is_staff', models.BooleanField(blank=True, default=False, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', apps.users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=150, null=True, verbose_name='name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('gender', models.CharField(blank=True, choices=[('None', 'Not Selected'), ('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='None', max_length=20, null=True, verbose_name='Gender')),
                ('photo', models.FileField(blank=True, default='photos/default-user-avatar.png', null=True, upload_to='photos/', verbose_name='Photo')),
                ('membership', models.CharField(blank=True, choices=[('Normal', 'Normal'), ('Bronze', 'Bronze'), ('Silver', 'Silver'), ('Gold', 'Gold'), ('Platinum', 'Platinum')], default='Normal', max_length=50, null=True, verbose_name='Membership')),
                ('total_spend_amount', models.FloatField(blank=True, default=0, null=True, verbose_name='Total Spend Amount')),
                ('point_used', models.FloatField(blank=True, default=0, null=True, verbose_name='Point Used')),
                ('current_point', models.FloatField(blank=True, default=0, null=True, verbose_name='Current Point')),
                ('status', models.CharField(blank=True, choices=[('NewCreated', 'Newly Created Account'), ('Deleted', 'Account Deleted'), ('ReOpened', 'Account Created Again'), ('Banned', 'Banned Account')], default='NewCreated', max_length=10, null=True, verbose_name='User Status')),
                ('is_deleted', models.BooleanField(blank=True, default=False, help_text="If user deleted than this field will change to True, but reopen account won't change anything. ", null=True, verbose_name='Deleted Account')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OTPtoken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('perpose', models.CharField(blank=True, choices=[('Other', 'Other'), ('Login', 'Login'), ('NoUse', 'No Use'), ('Register', 'Register'), ('PasswordReset', 'Password Reset')], default='NoUse', help_text='For which perpose this token is going to be use.', max_length=150, null=True, verbose_name='Purpose of this token')),
                ('token', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('is_used', models.BooleanField(blank=True, default=False, help_text='Designates whether this token used or not. Select this to make it not usable.', null=True, verbose_name='Is Used')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTPToken',
                'verbose_name_plural': 'OTPtokens',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(blank=True, help_text='Give a name to this address like Home or Office', max_length=150, null=True, unique=True, verbose_name='Address Name')),
                ('flat', models.CharField(blank=True, max_length=15, null=True, verbose_name='Flat Number')),
                ('house', models.CharField(blank=True, max_length=20, null=True, verbose_name='House Number')),
                ('address', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Address')),
                ('zip_code', models.CharField(blank=True, max_length=12, null=True, verbose_name='Zip Code')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='City')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True, verbose_name='Country')),
                ('longitude', models.CharField(blank=True, max_length=250, null=True)),
                ('latitude', models.CharField(blank=True, max_length=250, null=True)),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='users.profile')),
            ],
        ),
        migrations.AddConstraint(
            model_name='profile',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_profile'),
        ),
        migrations.AddConstraint(
            model_name='address',
            constraint=models.UniqueConstraint(fields=('profile', 'name'), name='unique_address'),
        ),
    ]
